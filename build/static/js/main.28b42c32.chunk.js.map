{"version":3,"sources":["img/logo/logo.png","components/headerComponent/header.js","components/footerComponent/footer.js","components/pages/homePage/homePage.js","components/pages/digitalArt/digitalArt.js","components/pages/traditionalArt/traditionalArt.js","components/pages/graphicDesign/graphicDesign.js","components/pages/contact/contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","width","height","to","Footer","href","aria-hidden","HomePage","DigitalArt","TraditionalArt","GraphicDesign","Contact","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,4KCiC5BC,MA7Bf,WACE,OACE,gCACE,yBAAKC,UAAU,aACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,MAAM,KAAKC,OAAO,OADpE,cAKA,6BACE,4BACE,wBAAIL,UAAU,SAAQ,kBAAC,IAAD,CAAMM,GAAG,KAAT,SAEtB,4BAAI,kBAAC,IAAD,CAAMA,GAAG,eAAT,gBAEJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,mBAAT,oBAEJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,kBAAT,mBAEJ,wBAAIN,UAAU,QAAO,kBAAC,IAAD,CAAMM,GAAG,YAAT,gBCFhBC,MAlBf,WACE,OACE,4BAAQP,UAAU,iBAChB,yBAAKA,UAAU,sBAAf,QAGA,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,eACZ,4BAAI,uBAAGQ,KAAK,oCAAmC,uBAAGR,UAAU,kBAAkBS,cAAY,YAC1F,4BAAI,uBAAGD,KAAK,gCAA+B,uBAAGR,UAAU,gBAAgBS,cAAY,eCD/EC,MARf,WACE,OACE,yBAAKV,UAAU,mBAAf,+BCMWW,MARf,WACE,OACE,yBAAKX,UAAU,mBAAf,mBCMWY,MARf,WACE,OACE,yBAAKZ,UAAU,mBAAf,aCMWa,MARf,WACE,OACE,yBAAKb,UAAU,mBAAf,kBCMWc,MARf,WACE,OACE,yBAAKd,UAAU,mBAAf,eCqCWe,MApBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,kBAEX,kBAAC,EAAD,MACE,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,cAAcC,UAAWP,IAC3C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,kBAAkBC,UAAWN,IAC/C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,iBAAiBC,UAAWL,IAC9C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,WAAWC,UAAWJ,KAE5C,kBAAC,EAAD,SCtBUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28b42c32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8a2c1482.png\";","import React from 'react';\nimport logo from '../../img/logo/logo.png'\nimport {Link} from 'react-router-dom';\n\nfunction Header() {\n  return (\n    <header>\n      <div className=\"frontLogo\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"70\" height=\"70\"></img>\n        USOA-PENKI\n      </div>\n      {/* nav for group of links */}\n      <nav>\n        <ul>\n          <li className=\"first\"><Link to='/'>Home</Link></li>\n\n          <li><Link to='/digitalArt'>Digital Art</Link></li>\n\n          <li><Link to='/traditionalArt'>Traditional Art</Link></li>\n\n          <li><Link to='/graphicDesign'>Graphic Design</Link></li>\n\n          <li className=\"last\"><Link to='/contact'>Contact</Link></li>\n        </ul>\n      </nav>\n        \n        \n\n\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer className=\"social-footer\">\n      <div className=\"social-footer-left\">\n        foot\n      </div>\n      <div className=\"social-footer-icons\">\n        <ul className=\"menu simple\">\n          <li><a href=\"https://www.instagram.com/?hl=en\"><i className=\"fa fa-instagram\" aria-hidden=\"false\"></i></a></li>\n          <li><a href=\"https://twitter.com/?lang=en\"><i className=\"fa fa-twitter\" aria-hidden=\"true\"></i></a></li>\n        </ul>\n      </div>\n    </footer>\n\n\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction HomePage() {\n  return (\n    <div className=\"container-fluid\">\n        Home page very interesting\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\n\nfunction DigitalArt() {\n  return (\n    <div className=\"container-fluid\">\n        Digital Art :D\n    </div>\n  );\n}\n\nexport default DigitalArt;\n","import React from 'react';\n\nfunction TraditionalArt() {\n  return (\n    <div className=\"container-fluid\">\n        Trad Art\n    </div>\n  );\n}\n\nexport default TraditionalArt;\n","import React from 'react';\n\nfunction GraphicDesign() {\n  return (\n    <div className=\"container-fluid\">\n        GraphicDesign\n    </div>\n  );\n}\n\nexport default GraphicDesign;\n","import React from 'react';\n\nfunction Contact() {\n  return (\n    <div className=\"container-fluid\">\n        Contact me\n    </div>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n\n//style\nimport './css/default.css'\n\n//components\nimport  Header from './components/headerComponent/header';\nimport  Footer from './components/footerComponent/footer';\nimport HomePage from './components/pages/homePage/homePage';\nimport DigitalArt from './components/pages/digitalArt/digitalArt';\nimport TraditionalArt from './components/pages/traditionalArt/traditionalArt';\nimport GraphicDesign from './components/pages/graphicDesign/graphicDesign';\nimport Contact from './components/pages/contact/contact';\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"page-container\">\n          \n          <Header/>\n            <div className=\"content-wrap\">\n              <Route exact path='/' component={HomePage}/>\n              <Route exact path='/digitalArt' component={DigitalArt}/>\n              <Route exact path='/traditionalArt' component={TraditionalArt}/>\n              <Route exact path='/graphicDesign' component={GraphicDesign}/>\n              <Route exact path='/contact' component={Contact}/>\n            </div>\n          <Footer/>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}